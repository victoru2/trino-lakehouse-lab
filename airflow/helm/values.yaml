revisionHistoryLimit: ~

uid: 50000
gid: 0

airflowHome: /opt/airflow

defaultAirflowRepository: apache/airflow

defaultAirflowTag: "2.10.2"

defaultAirflowDigest: ~

airflowVersion: "2.10.2"

images:
  airflow:
    repository: vurquiola2/airflow-with-extra-packages
    tag: 2.10.2
    digest: ~
    pullPolicy: Always
  useDefaultImageForMigration: false
  migrationsWaitTimeout: 60
  pod_template:
    repository: vurquiola2/airflow-with-extra-packages
    tag: 2.10.2
    pullPolicy: IfNotPresent
  flower:
    repository: ~
    tag: ~
    pullPolicy: IfNotPresent
  statsd:
    repository: quay.io/prometheus/statsd-exporter
    tag: v0.26.1
    pullPolicy: IfNotPresent
  redis:
    repository: redis
    tag: 7.2-bookworm
    pullPolicy: IfNotPresent
  pgbouncer:
    repository: apache/airflow
    tag: airflow-pgbouncer-2024.01.19-1.21.0
    pullPolicy: IfNotPresent
  pgbouncerExporter:
    repository: apache/airflow
    tag: airflow-pgbouncer-exporter-2024.06.18-0.17.0
    pullPolicy: IfNotPresent
  gitSync:
    repository: registry.k8s.io/git-sync/git-sync
    tag: v4.1.0
    pullPolicy: IfNotPresent

schedulerName: ~

airflowLocalSettings: |-
  {{- if semverCompare ">=2.2.0" .Values.airflowVersion }}
  {{- if not (or .Values.webserverSecretKey .Values.webserverSecretKeySecretName) }}
  from airflow.www.utils import UIAlert

  DASHBOARD_UIALERTS = [
    UIAlert(
      'Usage of a dynamic webserver secret key detected. We recommend a static webserver secret key instead.'
      ' See the <a href='
      '"https://airflow.apache.org/docs/helm-chart/stable/production-guide.html#webserver-secret-key" '
      'target="_blank" rel="noopener noreferrer">'
      'Helm Chart Production Guide</a> for more details.',
      category="warning",
      roles=["Admin"],
      html=True,
    )
  ]
  {{- end }}
  {{- end }}

rbac:
  create: false
  createSCCRoleBinding: false

executor: "CeleryExecutor"

allowPodLaunching: true

enableBuiltInSecretEnvVars:
  AIRFLOW__CORE__FERNET_KEY: true
  AIRFLOW__CORE__SQL_ALCHEMY_CONN: true
  AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: true
  AIRFLOW_CONN_AIRFLOW_DB: true
  AIRFLOW__WEBSERVER__SECRET_KEY: true
  AIRFLOW__CELERY__CELERY_RESULT_BACKEND: true
  AIRFLOW__CELERY__RESULT_BACKEND: true
  AIRFLOW__CELERY__BROKER_URL: true
  AIRFLOW__ELASTICSEARCH__HOST: true
  AIRFLOW__ELASTICSEARCH__ELASTICSEARCH_HOST: true

extraEnv: ~

extraEnvFrom: ~

data:

  metadataSecretName: ~
  resultBackendSecretName: ~
  brokerUrlSecretName: ~

  metadataConnection:
    user: postgres
    pass: postgres
    protocol: postgresql
    host: ~
    port: 5432
    db: postgres
    sslmode: disable
  resultBackendConnection: ~
  brokerUrl: ~

fernetKey: ~
fernetKeySecretName: ~

webserverSecretKey: e3072c13002affe510781b99877fd324
webserverSecretKeySecretName: ~

workers:
  replicas: 1
  revisionHistoryLimit: ~

  command: ~
  args:
  - "bash"
  - "-c"
  - |-
    exec \
    airflow {{ semverCompare ">=2.0.0" .Values.airflowVersion | ternary "celery worker" "worker" }}

  livenessProbe:
    enabled: true
    initialDelaySeconds: 10
    timeoutSeconds: 20
    failureThreshold: 5
    periodSeconds: 60
    command: ~

  updateStrategy: ~
  strategy:
    rollingUpdate:
      maxSurge: "100%"
      maxUnavailable: "50%"

  serviceAccount:
    automountServiceAccountToken: true
    create: true
    name: ~

  hpa:
    enabled: false

    minReplicaCount: 1
    maxReplicaCount: 3

    metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 80

  persistence:
    enabled: true
    persistentVolumeClaimRetentionPolicy: ~
    size: 20Gi
    storageClassName:
    fixPermissions: false

  # resources:
  #   limits:
  #     cpu: 1000m
  #     memory: 4Gi
  #   requests:
  #     cpu: 50m
  #     memory: 2Gi

  terminationGracePeriodSeconds: 600

  safeToEvict: true

  runtimeClassName: ~
  priorityClassName: ~
  logGroomerSidecar:
    enabled: true
    command: ~
    args: ["bash", "/clean-logs"]
    retentionDays: 15

  waitForMigrations:
    enabled: true

scheduler:
  enabled: true

  livenessProbe:
    initialDelaySeconds: 10
    timeoutSeconds: 20
    failureThreshold: 5
    periodSeconds: 60
    command: ~

  startupProbe:
    failureThreshold: 6
    periodSeconds: 10
    timeoutSeconds: 20
    command: ~

  replicas: 1
  revisionHistoryLimit: ~

  command: ~
  args: ["bash", "-c", "exec airflow scheduler"]

  updateStrategy: ~
  strategy: ~

  serviceAccount:
    automountServiceAccountToken: true
    create: true
    name: ~

  # resources:
  #   limits:
  #     cpu: 1000m
  #     memory: 512Mi
  #   requests:
  #     cpu: 100m
  #     memory: 256Mi

  safeToEvict: true

  priorityClassName: ~

  logGroomerSidecar:
    enabled: true
    command: ~
    args: ["bash", "/clean-logs"]
    retentionDays: 15

  waitForMigrations:
    enabled: true

createUserJob:
  ttlSecondsAfterFinished: 300
  command: ~
  args:
  - "bash"
  - "-c"
  - |-
    exec \
    airflow {{ semverCompare ">=2.0.0" .Values.airflowVersion | ternary "users create" "create_user" }} "$@"
  - --
  - "-r"
  - "{{ .Values.webserver.defaultUser.role }}"
  - "-u"
  - "{{ .Values.webserver.defaultUser.username }}"
  - "-e"
  - "{{ .Values.webserver.defaultUser.email }}"
  - "-f"
  - "{{ .Values.webserver.defaultUser.firstName }}"
  - "-l"
  - "{{ .Values.webserver.defaultUser.lastName }}"
  - "-p"
  - "{{ .Values.webserver.defaultUser.password }}"

  serviceAccount:
    automountServiceAccountToken: true
    create: true
    name: ~
  priorityClassName: ~

  useHelmHooks: false
  applyCustomEnv: false

  resources: {}

migrateDatabaseJob:
  enabled: true
  ttlSecondsAfterFinished: 300
  command: ~
  args:
  - "bash"
  - "-c"
  - >-
    exec \

    airflow {{ semverCompare ">=2.7.0" .Values.airflowVersion | ternary "db migrate" (semverCompare ">=2.0.0" .Values.airflowVersion | ternary "db upgrade" "upgradedb") }}

  jobAnnotations:
    "argocd.argoproj.io/hook": Sync

  serviceAccount:
    automountServiceAccountToken: true
    create: true
    name: ~

  resources: {}
  useHelmHooks: false
  applyCustomEnv: false

webserver:
  enabled: true
  allowPodLogReading: true
  livenessProbe:
    initialDelaySeconds: 15
    timeoutSeconds: 5
    failureThreshold: 5
    periodSeconds: 10
    scheme: HTTP

  readinessProbe:
    initialDelaySeconds: 15
    timeoutSeconds: 5
    failureThreshold: 5
    periodSeconds: 10
    scheme: HTTP

  startupProbe:
    timeoutSeconds: 20
    failureThreshold: 6
    periodSeconds: 10
    scheme: HTTP

  replicas: 1
  revisionHistoryLimit: ~

  command: ~
  args: ["bash", "-c", "exec airflow webserver"]

  serviceAccount:
    automountServiceAccountToken: true
    create: true
    name: ~

  podDisruptionBudget:
    enabled: false

    config:
      maxUnavailable: 1

  strategy: ~

  networkPolicy:
    ingress:
      ports:
      - port: "{{ .Values.ports.airflowUI }}"

  # resources:
  #   limits:
  #     memory: 2.5Gi
  #     cpu: 700m
  #   requests:
  #     memory: 256Mi
  #     cpu: 50m

  defaultUser:
    enabled: true
    role: Admin
    username: victor
    email: admin@example.com
    firstName: victor
    lastName: victor
    password: victor

  webserverConfig: ~
  webserverConfigConfigMapName: ~

  service:
    type: ClusterIP
    ports:
    - name: airflow-ui
      port: "{{ .Values.ports.airflowUI }}"
    loadBalancerIP: ~

  priorityClassName: ~

  waitForMigrations:
    enabled: true

triggerer:
  enabled: true
  replicas: 1
  revisionHistoryLimit: ~

  command: ~
  args: ["bash", "-c", "exec airflow triggerer"]

  updateStrategy: ~
  strategy:
    rollingUpdate:
      maxSurge: "100%"
      maxUnavailable: "50%"

  livenessProbe:
    initialDelaySeconds: 10
    timeoutSeconds: 20
    failureThreshold: 5
    periodSeconds: 60
    command: ~

  serviceAccount:
    automountServiceAccountToken: true
    create: true
    name: ~

  persistence:
    enabled: true
    persistentVolumeClaimRetentionPolicy: ~
    size: 10Gi
    storageClassName:
    fixPermissions: false

  # resources:
  #   limits:
  #     cpu: 1800m
  #     memory: 512Mi
  #   requests:
  #     cpu: 50m
  #     memory: 32Mi

  terminationGracePeriodSeconds: 60

  safeToEvict: true

  priorityClassName: ~

  logGroomerSidecar:
    enabled: true
    command: ~
    args: ["bash", "/clean-logs"]
    retentionDays: 15

  waitForMigrations:
    enabled: true

statsd:

  enabled: true
  revisionHistoryLimit: ~

  args: ["--statsd.mapping-config=/etc/statsd-exporter/mappings.yml"]

  serviceAccount:
    automountServiceAccountToken: true
    create: true
    name: ~

  uid: 65534
  # resources:
  #   limits:
  #     cpu: 100m
  #     memory: 256Mi
  #   requests:
  #     cpu: 50m
  #     memory: 20Mi

  priorityClassName: ~

redis:
  enabled: true
  terminationGracePeriodSeconds: 600
  serviceAccount:
    automountServiceAccountToken: true
    create: true
    name: ~

    annotations: {}

  persistence:
    enabled: true
    size: 1Gi

  resources: {}
  passwordSecretName: ~

  password: ~

  safeToEvict: true
  priorityClassName: ~

  uid: 0

registry:
  secretName: ~

ports:
  flowerUI: 5555
  airflowUI: 8080
  workerLogs: 8793
  triggererLogs: 8794
  redisDB: 6379
  statsdIngest: 9125
  statsdScrape: 9102
  pgbouncer: 6543
  pgbouncerScrape: 9127
  _rpcServer: 9080

postgresql:
  enabled: true
  auth:
    enablePostgresUser: true
    postgresPassword: postgres
    username: ""
    password: ""

config:
  core:
    dags_folder: '{{ include "airflow_dags" . }}'
    load_examples: 'False'
    executor: '{{ .Values.executor }}'
    colored_console_log: 'False'
    remote_logging: '{{- ternary "True" "False" .Values.elasticsearch.enabled }}'
  logging:
    remote_logging: '{{- ternary "True" "False" .Values.elasticsearch.enabled }}'
    colored_console_log: 'False'
  metrics:
    statsd_on: '{{ ternary "True" "False" .Values.statsd.enabled }}'
    statsd_port: 9125
    statsd_prefix: airflow
    statsd_host: '{{ printf "%s-statsd" (include "airflow.fullname" .) }}'
  webserver:
    enable_proxy_fix: 'True'
    rbac: 'False'
  celery:
    flower_url_prefix: '{{ ternary "" .Values.ingress.flower.path (eq .Values.ingress.flower.path "/") }}'
    worker_concurrency: 16
  scheduler:
    standalone_dag_processor: '{{ ternary "True" "False" .Values.dagProcessor.enabled }}'
    statsd_on: '{{ ternary "True" "False" .Values.statsd.enabled }}'
    statsd_port: 9125
    statsd_prefix: airflow
    statsd_host: '{{ printf "%s-statsd" (include "airflow.fullname" .) }}'
    run_duration: 41460
  elasticsearch:
    json_format: 'True'
    log_id_template: "{dag_id}_{task_id}_{execution_date}_{try_number}"
  elasticsearch_configs:
    max_retries: 3
    timeout: 30
    retry_timeout: 'True'
  kerberos:
    keytab: '{{ .Values.kerberos.keytabPath }}'
    reinit_frequency: '{{ .Values.kerberos.reinitFrequency }}'
    principal: '{{ .Values.kerberos.principal }}'
    ccache: '{{ .Values.kerberos.ccacheMountPath }}/{{ .Values.kerberos.ccacheFileName }}'
  celery_kubernetes_executor:
    kubernetes_queue: 'kubernetes'
  kubernetes:
    namespace: '{{ .Release.Namespace }}'
    airflow_configmap: '{{ include "airflow_config" . }}'
    airflow_local_settings_configmap: '{{ include "airflow_config" . }}'
    pod_template_file: '{{ include "airflow_pod_template_file" . }}/pod_template_file.yaml'
    worker_container_repository: '{{ .Values.images.airflow.repository }}'
    worker_container_tag: '{{ .Values.images.airflow.tag }}'
    multi_namespace_mode: '{{ ternary "True" "False" .Values.multiNamespaceMode }}'
  kubernetes_executor:
    namespace: '{{ .Release.Namespace }}'
    pod_template_file: '{{ include "airflow_pod_template_file" . }}/pod_template_file.yaml'
    worker_container_repository: '{{ .Values.images.airflow.repository }}'
    worker_container_tag: '{{ .Values.images.airflow.tag }}'
    multi_namespace_mode: '{{ ternary "True" "False" .Values.multiNamespaceMode }}'
  triggerer:
    default_capacity: 1000

podTemplate: ~

dags:
  mountPath: ~
  gitSync:
    enabled: true

    repo: https://github.com/victoru2/trino-lakehouse-lab.git
    branch: main
    rev: HEAD
    ref: main
    depth: 1
    maxFailures: 0
    subPath: "airflow/dags"
    credentialsSecret: git-credentials

    period: 300s
    wait: ~
    envFrom: ~

    containerName: git-sync
    uid: 65533

    resources: {}
