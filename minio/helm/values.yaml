global:
  imageRegistry: ""
  imagePullSecrets: []
  defaultStorageClass: ""
  storageClass: ""
  compatibility:
    openshift:
      adaptSecurityContext: auto

nameOverride: ""
namespaceOverride: ""
fullnameOverride: ""
commonLabels: {}
commonAnnotations: {}
kubeVersion: ""
clusterDomain: cluster.local
extraDeploy: []

image:
  registry: docker.io
  repository: bitnami/minio
  tag: 2024.10.2-debian-12-r0
  digest: ""
  pullPolicy: IfNotPresent
  pullSecrets: []
  debug: false

clientImage:
  registry: docker.io
  repository: bitnami/minio-client
  tag: 2024.10.2-debian-12-r0
  digest: ""

mode: standalone

auth:
  existingSecret: minio-credentials
  rootUserSecretKey: rootUser
  rootPasswordSecretKey: rootPassword
  forcePassword: false
  useCredentialsFiles: false
  useSecret: true
  forceNewKeys: false

defaultBuckets: "raw-data-lake, lakehouse, trino"

disableWebUI: false
extraEnvVars: []
extraEnvVarsCM: ""
extraEnvVarsSecret: ""
command: []
args: []
schedulerName: ""
terminationGracePeriodSeconds: ""

deployment:
  updateStrategy:
    type: Recreate

statefulset:
  updateStrategy:
    type: RollingUpdate
  podManagementPolicy: Parallel
  replicaCount: 2
  zones: 2
  drivesPerNode: 2


automountServiceAccountToken: false
hostAliases: []

containerPorts:
  api: 9000
  console: 9001

podSecurityContext:
  enabled: true
  sysctls: []
  supplementalGroups: []
  fsGroup: 1001
  fsGroupChangePolicy: "OnRootMismatch"

containerSecurityContext:
  enabled: true
  seLinuxOptions: {}
  runAsUser: 1001
  runAsGroup: 1001
  runAsNonRoot: true
  privileged: false
  readOnlyRootFilesystem: true
  allowPrivilegeEscalation: false
  capabilities:
    drop: ["ALL"]
  seccompProfile:
    type: "RuntimeDefault"

podLabels: {}
podAnnotations: {}
podAffinityPreset: ""
podAntiAffinityPreset: soft

nodeAffinityPreset:
  type: ""
  key: ""
  values: []

affinity: {}
nodeSelector: {}
tolerations: []
topologySpreadConstraints: []
priorityClassName: ""
runtimeClassName: ""
resourcesPreset: "micro"
resources:
  requests:
    memory: 256Mi
    cpu: 15m
  limits:
    memory: 3Gi
    cpu: 150m

livenessProbe:
  enabled: true
  initialDelaySeconds: 5
  periodSeconds: 5
  timeoutSeconds: 5
  successThreshold: 1
  failureThreshold: 5

readinessProbe:
  enabled: true
  initialDelaySeconds: 5
  periodSeconds: 5
  timeoutSeconds: 1
  successThreshold: 1
  failureThreshold: 5

customLivenessProbe: {}
customReadinessProbe: {}
customStartupProbe: {}
lifecycleHooks: {}
extraVolumes: []
extraVolumeMounts: []
initContainers: []
sidecars: []

service:
  type: LoadBalancer
  ports:
    api: 9000
    console: 9001
  nodePorts:
    api: ""
    console: ""
  clusterIP: ""
  loadBalancerIP: ""
  loadBalancerSourceRanges: []
  externalTrafficPolicy: Cluster
  extraPorts: []
  headless:

networkPolicy:
  enabled: true
  allowExternal: true
  allowExternalEgress: true
  extraIngress: []
  extraEgress: []
  ingressNSMatchLabels: {}
  ingressNSPodMatchLabels: {}

persistence:
  enabled: true
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  storageClass: premium-rwo
  mountPath: /bitnami/minio/data
  accessModes:
  - ReadWriteOnce
  size: 30Gi
  existingClaim: ""

serviceAccount:
  create: true
  name: ""
  automountServiceAccountToken: false

pdb:
  create: true
  minAvailable: ""
  maxUnavailable: ""
